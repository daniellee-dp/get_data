#!/bin/bash

local_test="ns"
## egrep regex string of owned IP space
local_ips="45.79.137.45,104.200.29.200,139.162.97.213,139.162.107.51,139.162.123.141,172.104.85.244,172.104.108.143,172.104.113.103,172.105.208.198,172.105.236.145,85.90.247.173,139.162.137.236,172.105.79.9,139.162.128.103,139.162.148.164,45.79.249.220,139.162.163.245,172.104.242.81,139.162.169.6,139.162.169.78,172.104.136.229,172.105.95.78,139.162.147.131,139.162.175.56,172.105.66.85,45.79.249.82,139.162.178.214,139.162.171.153,139.162.187.167,172.105.81.41,139.162.20.18,139.162.38.26,139.162.29.88,139.162.38.50,139.162.2.180,139.162.43.118,172.104.44.90,172.104.178.146,172.104.187.195,139.162.38.225,139.162.54.59,139.162.34.57,139.162.56.92,139.162.42.207,139.162.63.41,172.104.33.220,172.104.43.156,172.104.171.168,172.104.174.209,139.162.90.151,139.162.99.166,139.177.177.30,139.177.183.69,139.144.59.63,139.177.203.212,139.177.190.220,143.42.72.132,45.79.194.230,170.187.207.224,139.177.180.124,172.104.130.149,172.104.139.148,172.104.147.247,172.104.149.22,172.104.238.145,139.162.15.146,172.104.179.30,172.104.189.207,172.105.116.169,172.105.119.61,139.162.38.246,172.104.182.31,172.104.164.230,172.104.189.139,139.162.184.153,172.104.202.187,139.177.176.190,172.104.228.247,172.104.236.59,172.104.244.148,172.104.133.47,172.104.244.80,172.104.253.208,172.104.253.214,172.104.253.221,172.104.253.235,172.105.79.84,139.162.37.72,172.104.60.179,172.104.63.253,139.162.86.31,172.104.81.213,139.162.99.133,172.104.89.182,139.162.97.139,172.104.99.138,172.105.194.8,172.105.99.16,172.105.103.224,139.177.186.25,172.105.114.170,139.177.198.86,172.105.15.5,45.79.238.233,172.105.171.11,172.105.173.159,172.105.189.166,172.104.202.42,172.105.248.148,172.104.138.104,172.105.251.137,172.105.188.69,172.105.255.140,172.104.155.36,172.105.71.12,139.162.190.60,172.105.73.170,139.162.138.240,172.105.74.168,139.162.154.247,172.105.76.137,139.162.175.107,172.105.88.115,172.105.65.218,172.105.91.156,172.105.91.248,172.105.247.213,172.233.0.41,172.233.16.159,172.233.158.66,172.236.224.4"
## name server domains owned by brand, considered local
## for ns1/ns2.domain.com, enter "domain.com"
## e.g local_ns="domain.com|whitelabelbrand.com|somens.com"
local_ns="fcomet.com|myfcloud.com|myfcloudin.com|myfcloudto.com|myfcloudau.com|myfcloudtx.com|myfcloudfr.com|myfcloudat.com|myfcloudnw.com|myfclouduk.com|myfcloudsg.com|myfcloudde.com|myfcloudjp.com|myfcloudch.com|myfcloudla.com|myfcloudmi.com|myfcloudwa.com|myfclouddc.com|myfcloudoc.com|myfcloudtn.com|myfcloudid.com|myfcloudse.com|myfcloudnl.com|myfcloudit.com|myfcloudps.com|myfcloudbr.com|mysafedns.com"
if [ "$1" ]; then
        local_ns="$1"
fi

## probably don't need to edit below this point
timeout=1
tries=1
resolvers="74.82.42.42 209.244.0.4 4.2.2.2 8.8.8.8 8.8.4.4 209.244.0.3 209.244.0.4"
host=`hostname`
tmpf="/tmp/.wk$$"

for i in `egrep -H OWNER= /var/cpanel/users/* | tr '/:=' ' ' | awk '{print$4":"$6}'`; do
        user=`echo $i | cut -d':' -f1`
        owner=`echo $i | cut -d':' -f2`
        if [ -f "/var/cpanel/users/$user" ] && [ -d "/var/cpanel/userdata/$user" ]; then
                suspended=`egrep SUSPENDED=1 /var/cpanel/users/$user`
                if [ -z "$suspended" ]; then
                        status=1
                else
                        status=0
                fi
                assigned_ip=`egrep IP= /var/cpanel/users/$user | cut -d'=' -f2`
                plan=`egrep PLAN= /var/cpanel/users/$user | cut -d'=' -f2`
                contact=`egrep CONTACTEMAIL= /var/cpanel/users/$user | cut -d'=' -f2`
                if [ -z "$contact" ]; then
                        contact=unset
                fi
                # main domain
                domain=`egrep main_domain /var/cpanel/userdata/$user/main | awk '{print$2}'`
                echo "$host,$owner,$user,$contact,$status,parent,$domain,$domain,$assigned_ip"
                # addons
                for addon in `cat /var/cpanel/userdata/$user/main | egrep -v cp_php_magic_include_path.conf | awk '/addon_domains/{f=1;next}/main_domain/{f=0}f' | awk '{print$1}' | tr -d ':'`; do
                        echo "$host,$owner,$user,$contact,$status,addon,$domain,$addon,$assigned_ip"
                done
                unset suspended unset status
        fi
done > $tmpf.userstubs

for i in `cat $tmpf.userstubs`; do
        host=`echo $i | cut -d',' -f1`
        owner=`echo $i | cut -d',' -f2`
        user=`echo $i | cut -d',' -f3`
        contact=`echo $i | cut -d',' -f4`
        status=`echo $i | cut -d',' -f5`
        type=`echo $i | cut -d',' -f6`
        pdomain=`echo $i | cut -d',' -f7`
        domain=`echo $i | cut -d',' -f8`
        assigned_ip=`echo $i | cut -d',' -f9`
        prefix="$i"
        if [ "$domain" ]; then
                resolv=`echo "$resolvers" | tr ' ' '\n' | awk 'BEGIN{srand();} {printf "%06d %s\n", rand()*1000000, $0;}' | head -n1 | awk '{print$2}'`
                domain_ip=`dig +time=$timeout +tries=$tries +short $domain @$resolv | head -n1`
                errcheck=`echo $domain_ip | egrep 'connection timed out'`
                if [ "$errcheck" ]; then
                        resolv=`echo "$resolvers" | tr ' ' '\n' | grep -v "$resolv" | awk 'BEGIN{srand();} {printf "%06d %s\n", rand()*1000000, $0;}' | head -n1 | awk '{print$2}'`
                        domain_ip=`dig +time=$timeout +tries=$tries +short $domain @$resolv | head -n1`
                        unset errcheck
                        errcheck=`echo $domain_ip | egrep 'connection timed out'`
                fi
                if [ -z "$domain_ip" ] || [ "$errcheck" ]; then
                        domain_ip="nxdom"
                fi
                if [ "$domain_ip" == "$assigned_ip" ]; then
                        hosted="lhost"
                else
                        hosted="rhost"
                fi
                if [ "$domain_ip" == "nxdom" ]; then
                        ns="nxdom"
                        ns_ip="nxdom"
                        ns_iplr="nxdom"
                        hosted="zombie"
                else
                        resolv=`echo "$resolvers" | tr ' ' '\n' | awk 'BEGIN{srand();} {printf "%06d %s\n", rand()*1000000, $0;}' | head -n1 | awk '{print$2}'`
                        ns=`dig +time=$timeout +tries=$tries $domain @$resolv NS | egrep '.*IN.*NS.*' | awk '{print$5}' | egrep -v '^$' | sed 's/.$//' | head -n1`
                        errcheck=`echo $ns | egrep 'connection timed out'`
                        if [ "$errcheck" ]; then
                                resolv=`echo "$resolvers" | tr ' ' '\n' | grep -v "$resolv" | awk 'BEGIN{srand();} {printf "%06d %s\n", rand()*1000000, $0;}' | head -n1 | awk '{print$2}'`
                                ns=`dig +time=$timeout +tries=$tries $domain @$resolv NS | egrep '.*IN.*NS.*' | awk '{print$5}' | egrep -v '^$' | sed 's/.$//' | head -n1`
                                unset errcheck
                                errcheck=`echo $ns | egrep 'connection timed out'`
                        fi
                        if [ -z "$errcheck" ]; then
                                ns_ip=`dig +time=$timeout +tries=$tries +short $ns @$resolv | head -n1`
                                errcheck=`echo $ns_ip | egrep 'connection timed out'`
                                if [ "$errcheck" ]; then
                                        resolv=`echo "$resolvers" | tr ' ' '\n' | grep -v "$resolv" | awk 'BEGIN{srand();} {printf "%06d %s\n", rand()*1000000, $0;}' | head -n1 | awk '{print$2}'`
                                        ns_ip=`dig +time=$timeout +tries=$tries +short $ns @$resolv | head -n1`
                                        unset errcheck
                                        errcheck=`echo $ns_ip | egrep 'connection timed out'`
                                fi
                        else
                                ns="nxdom"
                                ns_ip="nxdom"
                        fi
                        if [ "$ns_ip" == "nxdom" ] || [ "$ns" == "nxdom" ] || [ "$domain_ip" ==  "nxdom" ]; then
                                ns_iplr=nxdom
                        else
                                if [ "$local_test" == "ns" ]; then
                                        ns_iplr=`echo $ns | egrep "$local_ns"`
                                        if [ "$ns_iplr" ]; then
                                                ns_iplr=local
                                        else
                                                ns_iplr=remote
                                        fi
                                else
                                        ns_iplr=`echo $ns_ip | egrep "$local_ips"`
                                        if [ "$ns_iplr" ]; then
                                                ns_iplr=local
                                        else
                                                ns_iplr=remote
                                        fi
                                fi
                        fi
                fi
                echo "$prefix,$domain_ip,$hosted,$ns,$ns_ip,$ns_iplr"
        fi
done

rm -f $tmpf.*
